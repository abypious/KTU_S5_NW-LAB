#include<stdio.h>
#include<stdlib.h>
#include<string.h>

char label[20],operand[20],opcode[20],t1[20],t2[20],t3[20];
int s=-1,loccatr,start,start1,size,o=-1,i,flag;
FILE *fp1,*fp2,*fp3,*fp4,*fp5;

struct optab
{
  char code[20],mem[20];
}op[20];

struct sym
{
  char label1[20];
  char addr[30];
}sy[20];

void readoptab()
{
 while(1)
 {
  s++;
  fscanf(fp2,"%s%s",op[s].code,op[s].mem);
  if(getc(fp2)==EOF)
    break;
 } 
}

void readline()
{
  strcpy(t1,"");strcpy(t2,"");strcpy(t3,"");
  fscanf(fp1,"%s",t1);
  if(getc(fp1)!='\n')
  {
      fscanf(fp1,"%s",t2);
      if(getc(fp1)!='\n')
       {
         fscanf(fp1,"%s",t3);
       }
  }
  if(strcmp(t1,"")!=0 && strcmp(t2,"")!=0 && strcmp(t3,"")!=0)
  {
    strcpy(label,t1);strcpy(opcode,t2);strcpy(operand,t3);
  }
  else if(strcmp(t1,"")!=0 && strcmp(t2,"")!=0 && strcmp(t3,"")==0)
  {
    strcpy(label,"");strcpy(opcode,t1);strcpy(operand,t2);
  }
  else if(strcmp(t1,"")!=0 && strcmp(t2,"")==0 && strcmp(t3,"")==0)
  {
    strcpy(label,"");strcpy(opcode,t1);strcpy(operand,"");
  }
}

int main()
{
  char a[20],b[20],c[20],d[20];
  
  printf("Enter the filename of Code\n");
  scanf("%s",a);
  printf("Enter the filename of optable\n");
  scanf("%s",b);
  printf("Enter the filename to store immediate code\n");
  scanf("%s",c);
  printf("Enter the filename to store symtable\n");
  scanf("%s",d);
  
  fp1=fopen(a,"r");
  fp2=fopen(b,"r");
  fp3=fopen(c,"w");
  fp4=fopen(d,"w");
  fp5=fopen("length.txt","w");
  readoptab();
  
  fscanf(fp1,"%s\t%s\t%s",label,opcode,operand);
  
  if(strcmp(opcode,"START")==0)
  {
    
    start=strtol(operand,NULL,16);
    start1=(0x1)*start;
    loccatr=(0x1)*start;
    fprintf(fp3,"\t%s\t%s\t%s\n",label,opcode,operand);
    readline();
  }
  else
  {
    loccatr=0x0;
  }
  while(strcmp(opcode,"END")!=0)
  {
    int flag2=0;
    fprintf(fp3,"%x\t",loccatr);
    if(strcmp(label,"")!=0)
    {
      for(i=0;i<=o;i++)
      {
        if(strcmp(sy[i].label1,label)==0)
        {
         printf("Error in symbol table\n");
         char* str="Error";
         strcpy(sy[i].addr,str);
         flag2=1;
         break;
        }
      }
     if(flag2==0)
      {
       o++;
       strcpy(sy[o].label1,label);
       sprintf(sy[o].addr,"%x",loccatr);
      }
    } 
    flag=0;
    for(i=0;i<=s;i++)
    {
      if(strcmp(op[i].code,opcode)==0)
      {
        loccatr+=0x3;
        size=size+3;
        flag=1;
        break;
      }
    }     
   if(flag==0)
   {  
    if(strcmp(opcode,"WORD")==0)
     {
       loccatr+=0x3;
       size=size+3;
     }
    else if(strcmp(opcode,"RESW")==0)
     {       
       loccatr+=((0x3)*(atoi(operand)));
     } 
    else if(strcmp(opcode,"RESB")==0)
     {       
       loccatr+=(0x1)*atoi(operand);
     }
    else if(strcmp(opcode,"BYTE")==0)
     {       
       int len=strlen(operand);
       if(operand[0]=='C' || operand[0]=='c')
       {
         len=len-3;
       }
       else
       {
         len=(len-3)/2;
       }
       loccatr+=(0x1)*len;
       size=size+len;               
     }
    }  
      
    fprintf(fp3,"%s\t%s\t%s\n",label,opcode,operand);
    readline(); 
    
  }
  
  fprintf(fp3,"%x\t%s\t%s\t%s\n",loccatr,label,opcode,operand);
  int length=(0x1)*(loccatr-start1);
  fprintf(fp5,"%x\n%x",length,size);
  
  for(i=0;i<=o;i++)
  {
    fprintf(fp4,"%s\t%s",sy[i].label1,sy[i].addr);
    if(i!=s)
      fprintf(fp4,"\n");
  }
  
  
  printf("The length of the code :%x\n",length);
  
  fclose(fp1);
  fclose(fp2);
  fclose(fp3);
  fclose(fp4);
  
  return 0;
  
}

